#include <iostream>
#include<bits/stdc++.h>
#include<stack>
using namespace std;


// Function to return precedence of operators
int prec(char ck){
if(ck=='^')
return 3;

else if(ck=='*' || ck=='/')
return 2;

else if(ck=='+' || ck=='-')
return 1;

else
return -1;    
}

void infix_to_postfix(char* s){
stack<char> St;
string str;
for(int i=0;i<strlen(s);i++){
char c=s[i];

 // If the scanned character is an operand, add it to output string.
if((c>='a' && c<='z') || (c>='A' && c<='Z') || (c>='0' && c<='9'))          
str=str+c;

else if(c=='(' || c=='{' || c=='[')
St.push(c);

else if(c==')' || c=='}' || c==']'){
while(!St.empty() && (St.top()!='(' || St.top()!='(' || St.top()!='(')){
str=str+St.top();
St.pop();
}
St.pop();
}

 else{                                                                     // if c is operator
while(!St.empty() && (c!='(' || c!='{' || c!='[') && (prec(c)<=prec(St.top()))){
if(c=='^' && St.top()=='^')
break;
else{
str=str+St.top();
St.pop();
}
}
St.push(c);
}
}

  // Pop all the remaining elements from the stack
while(!St.empty()){
str=str+St.top();
St.pop();
}
cout<<"\n"<<str<<endl;
}
int main() {
    char ch[20];
cout<<"Enter the Infix expression: ";
cin.get(ch,20);
infix_to_postfix(ch);

    return 0;
}

/*
Enter the Infix expression: ((A+B)*c-d)*E
AB+c*d-E*
*/
